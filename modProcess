Option Explicit

'=== 既定行数にマスターの表サイズを戻す（B4セル：行数設定 / 空なら20000） ===
Private Sub ResetMasterSize(masterLo As ListObject)
    On Error Resume Next
    If masterLo Is Nothing Then Exit Sub
    Dim ws As Worksheet: Set ws = masterLo.Parent
    Dim reserve As Long
    reserve = CLng(Val(ws.Range("B4").Value)) ' 任意セルに既定行数を置く運用。空なら下で既定値に。
    If reserve <= 0 Then reserve = 20000

    Dim cols As Long: cols = masterLo.ListColumns.Count
    Dim newRg As Range
    Set newRg = masterLo.HeaderRowRange.Resize(reserve + 1, cols)
    masterLo.Resize newRg
    If Not masterLo.DataBodyRange Is Nothing Then masterLo.DataBodyRange.ClearContents
    On Error GoTo 0
End Sub


'==============================
' パイプライン切替（Main / List）
'==============================
Public Sub UsePipelineMain()
    CurrentMappingTableName = "Mapping_Main"
    CurrentMasterTableName = "Master_Main"
    CurrentExportBaseName = "main_Keihyouhounavi_Konpurasoudan"
    AllowOneToMany = False
    WriteLog "INFO", "Switched pipeline: Main"
End Sub

Public Sub UsePipelineList()
    CurrentMappingTableName = "Mapping_List"
    CurrentMasterTableName = "Master_List"
    CurrentExportBaseName = "list_Keihyouhounavi_Konpurasoudan"
    AllowOneToMany = True
    WriteLog "INFO", "Switched pipeline: List"
End Sub

'==============================
' エンコード選択
'==============================
Public Sub ChooseEncoding()
    Dim s As String
    s = InputBox( _
        "読み込み・書き出しのエンコードを指定してください。" & vbCrLf & _
        "AUTO / UTF-8 / Shift_JIS / UTF-16LE", _
        "Encoding Mode", IIf(Len(CurrentEncodingMode) = 0, "AUTO", CurrentEncodingMode))
    If s = "False" Then Exit Sub
    s = UCase$(Trim$(s))
    Select Case s
        Case "AUTO", "UTF-8", "UTF8": CurrentEncodingMode = IIf(s = "UTF8", "UTF-8", s)
        Case "SHIFT_JIS", "SJIS", "CP932": CurrentEncodingMode = "SHIFT_JIS"
        Case "UTF-16LE", "UTF16LE", "UNICODE": CurrentEncodingMode = "UTF-16LE"
        Case Else: CurrentEncodingMode = "AUTO"
    End Select
    EnsureFolder ThisWorkbook.Path & "\" & LOG_FOLDER & "\"
    WriteLog "INFO", "Encoding set: " & CurrentEncodingMode
    MsgBox "Encoding Mode: " & CurrentEncodingMode, vbInformation
End Sub

'==============================
' Import：CSV読込→キー索引→JOIN（無加工）→Master貼付
'==============================
Public Sub ImportFiles()
    On Error GoTo EH
    Dim tStart As Date: tStart = Now
    
    If Len(CurrentEncodingMode) = 0 Then CurrentEncodingMode = "AUTO"
    If Len(CurrentMappingTableName) = 0 Then UsePipelineMain
    
    Dim ok As Boolean
    ok = ReadMappingFromTableName(CurrentMappingTableName)
    If Not ok Then
        MsgBox "Mapping の読み取りに失敗しました。", vbCritical
        Exit Sub
    End If
    
    Dim importPath As String: importPath = ThisWorkbook.Path & "\" & IMPORT_FOLDER & "\"
    EnsureFolder ThisWorkbook.Path & "\" & LOG_FOLDER & "\"
    
    Set TableData = CreateObject("Scripting.Dictionary")
    If Not LoadAllCsv(importPath, Map_TblNames, TableData) Then Exit Sub
    
    ApplyFiltersIfExist
    
    BuildKeyIndexes
    
    m_baseTblName = PickBaseTableName(Map_TblNames, Map_SrcCols, Map_IsKey)
    If Len(m_baseTblName) = 0 And (Not Not Map_TblNames) <> 0 Then m_baseTblName = Map_TblNames(0)
     
    '=== ここでモードを無視して無加工JOIN ===
    IgnoreModeOnImport = True
    RawJoined = BuildJoinedRaw(m_baseTblName)
    IgnoreModeOnImport = False
    
    HasRaw = True: IsProcessed = False
    
    Dim masterLo As ListObject
    Set masterLo = GetListObjectByName(CurrentMasterTableName)
    If masterLo Is Nothing Then
        MsgBox "Masterテーブルが見つかりません: " & CurrentMasterTableName, vbCritical
        Exit Sub
    End If
    PasteToMasterByTable masterLo, RawJoined
    
    MsgBox "ファイルインポート完了（無加工をMasterへ反映）", vbInformation
    Exit Sub
EH:
    MsgBox "ImportFilesでエラー: " & Err.Description, vbCritical
End Sub

'==============================
' Process：加工適用 → Masterへ
'==============================
Public Sub ProcessData()
    On Error GoTo EH
    Dim tStart As Date: tStart = Now
    If Not HasRaw Then
        MsgBox "先に『ファイルインポート』を実行してください。", vbExclamation
        Exit Sub
    End If
    If Len(CurrentMappingTableName) = 0 Then UsePipelineMain
    
    Dim ok As Boolean
    ok = ReadMappingFromTableName(CurrentMappingTableName)
    If Not ok Then
        WriteLog "ERROR", "Mapping read failed in ProcessData"
        MsgBox "Mapping の読み取りに失敗しました。", vbCritical
        Exit Sub
    End If
    
    Dim procArr As Variant
    procArr = ApplyTransformSmart(RawJoined)
    
    Dim masterLo As ListObject
    Set masterLo = GetListObjectByName(CurrentMasterTableName)
    If masterLo Is Nothing Then
        MsgBox "Masterテーブルが見つかりません: " & CurrentMasterTableName, vbCritical
        Exit Sub
    End If
    PasteToMasterByTable masterLo, procArr
    IsProcessed = True
    
    WriteLog "INFO", "ProcessData: done / rows=" & UBound(procArr, 1) & " / cols=" & UBound(procArr, 2) & " / elapsed=" & Format(Now - tStart, "hh:nn:ss")
    MsgBox "データ加工完了（Masterへ反映）", vbInformation
    Exit Sub
EH:
    WriteLog "ERROR", "ProcessData error: " & Err.Number & " " & Err.Description
    MsgBox "ProcessDataでエラー: " & Err.Description, vbCritical
End Sub

'==============================
' Clear：Masterクリア＆中間データ破棄（安全版）
'==============================
Public Sub ClearData()
    Dim prevCalc As XlCalculation
    Dim prevUpd As Boolean, prevEvt As Boolean, prevDisp As Boolean
    Dim t0 As Double: t0 = Timer

    If Len(CurrentMasterTableName) = 0 Then UsePipelineMain

    ' 高速化設定の退避
    On Error Resume Next
    prevUpd = Application.ScreenUpdating
    prevEvt = Application.EnableEvents
    prevDisp = Application.DisplayAlerts
    prevCalc = Application.Calculation
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Application.DisplayAlerts = False
    Application.Calculation = xlCalculationManual
    On Error GoTo 0

    On Error GoTo EH
    Dim lo As ListObject
    Set lo = GetListObjectByName(CurrentMasterTableName)
    If Not lo Is Nothing Then
        ' フィルタ解除
        On Error Resume Next
        If Not lo.AutoFilter Is Nothing Then lo.AutoFilter.ShowAllData
        On Error GoTo 0

        ' ←ここがポイント：行を「削除」せず、既定サイズに「リサイズ」して中身だけ空にする
        ResetMasterSize lo   ' B4 の値（空なら 20000 行）に合わせてリサイズ＆ClearContents
    End If

    ' 中間データの解放
    HasRaw = False
    IsProcessed = False

    On Error Resume Next
    If (Not Not RawJoined) <> 0 Then Erase RawJoined
    If (Not Not m_baseRowIdx) <> 0 Then Erase m_baseRowIdx
    On Error GoTo 0

    m_baseTblName = ""
    Set TableData = Nothing
    Set KeyIndexSingle = Nothing
    Set KeyIndexMulti = Nothing

    WriteLog "INFO", "ClearData: cleared in " & Format(Timer - t0, "0.00") & "s"
DONE:
    ' 設定を戻す
    On Error Resume Next
    Application.ScreenUpdating = prevUpd
    Application.EnableEvents = prevEvt
    Application.DisplayAlerts = prevDisp
    Application.Calculation = prevCalc
    On Error GoTo 0

    MsgBox "初期化しました。", vbInformation
    Exit Sub

EH:
    On Error Resume Next
    Application.ScreenUpdating = prevUpd
    Application.EnableEvents = prevEvt
    Application.DisplayAlerts = prevDisp
    Application.Calculation = prevCalc
    On Error GoTo 0
    WriteLog "ERROR", "ClearData error: " & Err.Number & " " & Err.Description
    MsgBox "ClearDataでエラー: " & Err.Description, vbCritical
End Sub



'==============================
' Masterへ貼付（行数だけ合わせて一括代入）
'==============================
Public Sub PasteToMasterByTable(masterTbl As ListObject, dataArr As Variant)
    Dim rows As Long, cols As Long
    rows = UBound(dataArr, 1): cols = UBound(dataArr, 2)
    If masterTbl.ListColumns.Count <> cols Then
        WriteLog "ERROR", "Master columns mismatch. Master=" & masterTbl.ListColumns.Count & " Mapping=" & cols
        MsgBox "Masterテーブルの列数がMappingの出力列数と一致しません。", vbCritical
        Exit Sub
    End If
    Dim newRange As Range
    Set newRange = masterTbl.HeaderRowRange.Resize(rows + 1, cols)
    masterTbl.Resize newRange
    masterTbl.DataBodyRange.Value = dataArr
End Sub
