Option Explicit
'============================================================
' modProcess
' 概要: パイプラインの切替、Import/Processのワークフロー、Masterテーブルへの貼り付け、エンコード選択等のオーケストレーション。
'============================================================

'=== 既定行数にマスターの表サイズを戻す（B4セル：行数設定 / 空なら20000） ===

'--- ResetMasterSize ---
' 概要: Masterテーブルの行数をB4セル値（空は20000）に再設定し、データ部をクリアします。
' 引数:
'   masterLo As ListObject  … 対象のMaster ListObject
Private Sub ResetMasterSize(masterLo As ListObject)
    On Error Resume Next
    If masterLo Is Nothing Then Exit Sub
    Dim ws As Worksheet: Set ws = masterLo.Parent
    Dim reserve As Long
    reserve = CLng(Val(ws.Range("B4").Value)) ' 任意セルに既定行数を置く運用。空なら下で既定値に。
    If reserve <= 0 Then reserve = 20000

    Dim cols As Long: cols = masterLo.ListColumns.Count
    Dim newRg As Range
    Set newRg = masterLo.HeaderRowRange.Resize(reserve + 1, cols)
    masterLo.Resize newRg
    If Not masterLo.DataBodyRange Is Nothing Then masterLo.DataBodyRange.ClearContents
    On Error GoTo 0
End Sub

'=== 高速クリア：テーブルのデータ部を空に（列構成は維持） ===

'--- FastClearTable ---
' 概要: ListObjectのデータ行を全削除（列構成は維持）します。
' 引数:
'   lo As ListObject  … 対象のListObject
Private Sub FastClearTable(lo As ListObject)
    If lo Is Nothing Then Exit Sub
    If lo.DataBodyRange Is Nothing Then
        ' 既に0行
        Exit Sub
    End If
    ' 行がある場合は全部削除（列は温存）
    lo.DataBodyRange.Delete xlShiftUp
End Sub

' パイプライン切替（Main / List）

'--- UsePipelineMain ---
' 概要: パイプラインをMainに設定します。
Public Sub UsePipelineMain()
    CurrentMappingTableName = "Mapping_Main"
    CurrentMasterTableName = "Master_Main"
    CurrentExportBaseName = "main_Keihyouhounavi_Konpurasoudan"
    AllowOneToMany = False
    WriteLog "INFO", "Switched pipeline: Main"
End Sub

'--- UsePipelineList ---
' 概要: パイプラインをListに設定します。

Public Sub UsePipelineList()
    CurrentMappingTableName = "Mapping_List"
    CurrentMasterTableName = "Master_List"
    CurrentExportBaseName = "list_Keihyouhounavi_Konpurasoudan"
    AllowOneToMany = True
    WriteLog "INFO", "Switched pipeline: List"
End Sub

' エンコード選択

'--- ChooseEncoding ---
' 概要: 読み書き用のエンコードを入力値から設定します。
Public Sub ChooseEncoding()
    Dim s As String
    s = InputBox( _
        "読み込み・書き出しのエンコードを指定してください。" & vbCrLf & _
        "AUTO / UTF-8 / Shift_JIS / UTF-16LE", _
        "Encoding Mode", IIf(Len(CurrentEncodingMode) = 0, "AUTO", CurrentEncodingMode))
    If s = "False" Then Exit Sub
    s = UCase$(Trim$(s))
    Select Case s
        Case "AUTO", "UTF-8", "UTF8": CurrentEncodingMode = IIf(s = "UTF8", "UTF-8", s)
        Case "SHIFT_JIS", "SJIS", "CP932": CurrentEncodingMode = "SHIFT_JIS"
        Case "UTF-16LE", "UTF16LE", "UNICODE": CurrentEncodingMode = "UTF-16LE"
        Case Else: CurrentEncodingMode = "AUTO"
    End Select
    EnsureFolder ThisWorkbook.Path & "\" & LOG_FOLDER & "\"
    WriteLog "INFO", "Encoding set: " & CurrentEncodingMode
    MsgBox "Encoding Mode: " & CurrentEncodingMode, vbInformation
End Sub

' Import：CSV読込→キー索引→JOIN（無加工）→Master貼付

'--- ImportFiles ---
' 概要: CSVの読み込み→フィルタ適用→キー索引生成→無加工JOIN→Master貼付までを実行します。
' 引数:
'   pipeline  … パイプライン名 'Main' または 'List'（空は現設定のまま）
Public Sub ImportFiles(pipeline)
    On Error GoTo EH
    Dim tStart As Date: tStart = Now
    
    If Len(CurrentEncodingMode) = 0 Then CurrentEncodingMode = "AUTO"
    If pipeline = "Main" Then
        UsePipelineMain
    ElseIf pipeline = "List" Then
        UsePipelineList
    End If
    
    Dim ok As Boolean
    ok = ReadMappingFromTableName(CurrentMappingTableName)
    If Not ok Then
        MsgBox "Mapping の読み取りに失敗しました。", vbCritical
        Exit Sub
    End If
    
    Dim importPath As String: importPath = ThisWorkbook.Path & "\" & IMPORT_FOLDER & "\"
    EnsureFolder ThisWorkbook.Path & "\" & LOG_FOLDER & "\"
    
    Set TableData = CreateObject("Scripting.Dictionary")
    If Not LoadAllCsv(importPath, Map_TblNames, TableData) Then Exit Sub
    
    ApplyFiltersIfExist
    
    BuildKeyIndexes
    
    m_baseTblName = PickBaseTableName(Map_TblNames, Map_SrcCols, Map_IsKey)
    If Len(m_baseTblName) = 0 And (Not Not Map_TblNames) <> 0 Then m_baseTblName = Map_TblNames(0)
     
    '=== ここでモードを無視して無加工JOIN ===
    IgnoreModeOnImport = True
    RawJoined = BuildJoinedRaw(m_baseTblName)
    IgnoreModeOnImport = False
    
    HasRaw = True: IsProcessed = False
    
    Dim masterLo As ListObject
    Set masterLo = GetListObjectByName(CurrentMasterTableName)
    If masterLo Is Nothing Then
        MsgBox "Masterテーブルが見つかりません: " & CurrentMasterTableName, vbCritical
        Exit Sub
    End If
    PasteToMasterByTable masterLo, RawJoined
    
    MsgBox "ファイルインポート完了（無加工をMasterへ反映）", vbInformation
    Exit Sub
EH:
    MsgBox "ImportFilesでエラー: " & Err.Description, vbCritical
End Sub

' Process：加工適用 → Masterへ

'--- ProcessData ---
' 概要: RawJoinedに加工を適用（型変換/式評価）してMasterに反映します。
' 引数:
'   pipeline  … パイプライン名 'Main' または 'List'（空は現設定のまま）
Public Sub ProcessData(pipeline)
    On Error GoTo EH
    Dim tStart As Date: tStart = Now
    If Not HasRaw Then
        MsgBox "先に『ファイルインポート』を実行してください。", vbExclamation
        Exit Sub
    End If
    
    If Len(CurrentEncodingMode) = 0 Then CurrentEncodingMode = "AUTO"
    If pipeline = "Main" Then
        UsePipelineMain
    ElseIf pipeline = "List" Then
        UsePipelineList
    End If
    
    Dim ok As Boolean
    ok = ReadMappingFromTableName(CurrentMappingTableName)
    If Not ok Then
        WriteLog "ERROR", "Mapping read failed in ProcessData"
        MsgBox "Mapping の読み取りに失敗しました。", vbCritical
        Exit Sub
    End If
    
    Dim procArr As Variant
    procArr = ApplyTransformSmart(RawJoined)
    
    Dim masterLo As ListObject
    Set masterLo = GetListObjectByName(CurrentMasterTableName)
    If masterLo Is Nothing Then
        MsgBox "Masterテーブルが見つかりません: " & CurrentMasterTableName, vbCritical
        Exit Sub
    End If
    PasteToMasterByTable masterLo, procArr
    IsProcessed = True
    
    WriteLog "INFO", "ProcessData: done / rows=" & UBound(procArr, 1) & " / cols=" & UBound(procArr, 2) & " / elapsed=" & Format(Now - tStart, "hh:nn:ss")
    MsgBox "データ加工完了（Masterへ反映）", vbInformation
    Exit Sub
EH:
    WriteLog "ERROR", "ProcessData error: " & Err.Number & " " & Err.Description
    MsgBox "ProcessDataでエラー: " & Err.Description, vbCritical
End Sub

' Clear：Masterクリア＆中間データ破棄（安全版）

'--- ClearData ---
' 概要: この手続きの役割を説明します。
Public Sub ClearData()
    Dim prevCalc As XlCalculation
    Dim prevEvt As Boolean, prevUpd As Boolean
    prevCalc = Application.Calculation
    prevEvt = Application.EnableEvents
    prevUpd = Application.ScreenUpdating
    Application.Calculation = xlCalculationManual
    Application.EnableEvents = False
    Application.ScreenUpdating = False

    On Error GoTo FIN

    Dim lo As ListObject

    Set lo = GetListObjectByName("Master_Main")
    If Not lo Is Nothing Then FastClearTable lo

    Set lo = GetListObjectByName("Master_List")
    If Not lo Is Nothing Then FastClearTable lo

    ' 中間データのクリア
    On Error Resume Next
    Set TableData = Nothing
    Set KeyIndexSingle = Nothing
    Set KeyIndexMulti = Nothing
    Erase Map_OutCols: Erase Map_DataType
    Erase Map_IsKey: Erase Map_Mode: Erase Map_Def
    Erase Map_IsKey: Erase Map_TblNames
    Erase Map_SrcCols
    On Error GoTo 0

    WriteLog "INFO", "ClearData: done (fast)"
    MsgBox "データクリアを実行しました。"

FIN:
    Application.Calculation = prevCalc
    Application.EnableEvents = prevEvt
    Application.ScreenUpdating = prevUpd
End Sub

' Masterへ貼付（行数だけ合わせて一括代入）

'--- PasteToMasterByTable ---
' 概要: この手続きの役割を説明します。
' 引数:
'   masterTbl As ListObject  … 用途を指定します。
'   dataArr As Variant  … 用途を指定します。
Public Sub PasteToMasterByTable(masterTbl As ListObject, dataArr As Variant)
    Dim rows As Long, cols As Long
    rows = UBound(dataArr, 1): cols = UBound(dataArr, 2)
    If masterTbl.ListColumns.Count <> cols Then
        WriteLog "ERROR", "Master columns mismatch. Master=" & masterTbl.ListColumns.Count & " Mapping=" & cols
        MsgBox "Masterテーブルの列数がMappingの出力列数と一致しません。", vbCritical
        Exit Sub
    End If
    Dim newRange As Range
    Set newRange = masterTbl.HeaderRowRange.Resize(rows + 1, cols)
    masterTbl.Resize newRange
    masterTbl.DataBodyRange.Value = dataArr
End Sub